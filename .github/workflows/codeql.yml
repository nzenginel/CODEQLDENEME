name: "CodeQL Advanced"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: csharp
          build-mode: none
        - language: javascript-typescript
          build-mode: none

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        output:  "${{github.workspace}}/CodeQL-Results"

    - name: Print sarif files
      id: print_sarif
      run: |
        echo "CSHARP"
        less "${{github.workspace}}/CodeQL-Results/csharp.sarif
        
        echo "------"
        
        echo "JAVASCRIPT" 
        less "${{github.workspace}}/CodeQL-Results/javascript.sarif

    - name: Parse Sarif file
      id: parse_sarif
      run: |
        cd "${{github.workspace}}/CodeQL-Results/"

        for file in $(find . -type f -name "*.sarif"); do
          echo "Processing $file"
          
          # Get the number of results
          results_length=$(jq '.runs[0].results | length' "$file")
          echo "Results count: $results_length"
        
          # Loop through each result
          jq -c '.runs[0].results[]' "$file" | while read -r result; do
              ruleId=$(echo "$result" | jq -r '.ruleId')
              echo "ruleID: $ruleId"
        
              # Find the rule in extensions[0].rules
              rule=$(jq -c --arg rid "$ruleId" '.runs[0].tool.extensions[0].rules[] | select(.id == $rid)' "$path")
              rule_id=$(echo "$rule" | jq -r '.id')
              short_desc=$(echo "$rule" | jq -r '.shortDescription.text')
              level=$(echo "$rule" | jq -r '.defaultConfiguration.level')
          
              echo "codeQLRule: $rule_id $short_desc"
              echo "$level"
              echo "*****"
              # error - High
              # warning - Medium
              # info - Low
          done

        done

        
